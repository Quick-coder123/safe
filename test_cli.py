#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –≤–µ—Ä—Å—ñ—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å–µ–π—Ñ—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
"""

import sqlite3
from datetime import datetime, timedelta

class SafeCalculatorCLI:
    """CLI –≤–µ—Ä—Å—ñ—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    
    def __init__(self):
        self.rates = {
            "dailyRates": [
                {"term": "1-30 –¥–Ω—ñ–≤", "rates": {"1 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 39, "2 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 51, "3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 63, "4 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 63, "5 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 63}},
                {"term": "31-90 –¥–Ω—ñ–≤", "rates": {"1 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 25, "2 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 26, "3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 28, "4 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 35, "5 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 43}},
                {"term": "91-180 –¥–Ω—ñ–≤", "rates": {"1 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 22, "2 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 24, "3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 26, "4 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 33, "5 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 41}},
                {"term": "181-365 –¥–Ω—ñ–≤", "rates": {"1 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 20, "2 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 22, "3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 24, "4 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 29, "5 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è": 40}}
            ],
            "insuranceRates": [
                {"term": "1-90 –¥–Ω—ñ–≤", "cost": 285},
                {"term": "91-180 –¥–Ω—ñ–≤", "cost": 370},
                {"term": "181-270 –¥–Ω—ñ–≤", "cost": 430},
                {"term": "271-365 –¥–Ω—ñ–≤", "cost": 550}
            ],
            "attorneyTariff": 300
        }
    
    def get_daily_rate(self, category: str, days: int) -> float:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞–≤–∫–∏"""
        for rate_range in self.rates["dailyRates"]:
            if "1-30" in rate_range["term"] and days <= 30:
                return rate_range["rates"].get(category, 0)
            elif "31-90" in rate_range["term"] and 31 <= days <= 90:
                return rate_range["rates"].get(category, 0)
            elif "91-180" in rate_range["term"] and 91 <= days <= 180:
                return rate_range["rates"].get(category, 0)
            elif "181-365" in rate_range["term"] and 181 <= days <= 365:
                return rate_range["rates"].get(category, 0)
        return 0
    
    def get_insurance_cost(self, days: int) -> float:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"""
        for rate in self.rates["insuranceRates"]:
            if "1-90" in rate["term"] and days <= 90:
                return rate["cost"]
            elif "91-180" in rate["term"] and 91 <= days <= 180:
                return rate["cost"]
            elif "181-270" in rate["term"] and 181 <= days <= 270:
                return rate["cost"]
            elif "271-365" in rate["term"] and 271 <= days <= 365:
                return rate["cost"]
        return 0
    
    def calculate(self, category: str, days: int, coverage: bool = False, attorney_count: int = 0, penalty: float = 0.0):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ"""
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –æ—Ä–µ–Ω–¥–∏
        daily_rate = self.get_daily_rate(category, days)
        rent_cost = daily_rate * days
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
        coverage_cost = self.get_insurance_cost(days) if coverage else 0
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–≤—ñ—Ä–µ–Ω–æ—Å—Ç–µ–π
        attorney_cost = attorney_count * self.rates["attorneyTariff"]
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞
        total_cost = rent_cost + coverage_cost + attorney_cost + penalty
        
        return {
            'category': category,
            'days': days,
            'daily_rate': daily_rate,
            'rent_cost': rent_cost,
            'coverage_cost': coverage_cost,
            'attorney_cost': attorney_cost,
            'penalty_cost': penalty,
            'total_cost': total_cost
        }
    
    def show_clients(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        conn = sqlite3.connect('safe_calculator.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, ipn, phone, email FROM clients ORDER BY name')
        clients = cursor.fetchall()
        
        if clients:
            print("\nüìã –°–ü–ò–°–û–ö –ö–õ–Ü–Ñ–ù–¢–Ü–í:")
            print("-" * 60)
            for i, (name, ipn, phone, email) in enumerate(clients, 1):
                print(f"{i:2}. {name}")
                print(f"    –Ü–ü–ù: {ipn or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")
                print(f"    –¢–µ–ª: {phone or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")
                print(f"    Email: {email or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")
                print()
        else:
            print("\nüìã –ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
    
    def demo_calculations(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏"""
        print("\nüßÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–Ü –†–û–ó–†–ê–•–£–ù–ö–ò:")
        print("=" * 50)
        
        test_cases = [
            {"category": "1 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "days": 30, "coverage": True, "attorney": 1, "penalty": 0},
            {"category": "3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "days": 90, "coverage": False, "attorney": 2, "penalty": 150},
            {"category": "5 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "days": 180, "coverage": True, "attorney": 0, "penalty": 0},
            {"category": "2 –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "days": 365, "coverage": True, "attorney": 3, "penalty": 500}
        ]
        
        for i, test in enumerate(test_cases, 1):
            print(f"\n{i}. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ #{i}")
            print("-" * 30)
            
            result = self.calculate(
                test["category"], 
                test["days"], 
                test["coverage"], 
                test["attorney"], 
                test["penalty"]
            )
            
            print(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å–µ–π—Ñ—É: {result['category']}")
            print(f"–¢–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏: {result['days']} –¥–Ω—ñ–≤")
            print(f"–î–µ–Ω–Ω–∞ —Å—Ç–∞–≤–∫–∞: {result['daily_rate']} –≥—Ä–Ω/–¥–µ–Ω—å")
            print(f"–°—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: {'–¢–∞–∫' if test['coverage'] else '–ù—ñ'}")
            print(f"–î–æ–≤—ñ—Ä–µ–Ω–æ—Å—Ç—ñ: {test['attorney']} —à—Ç")
            print(f"–®—Ç—Ä–∞—Ñ: {test['penalty']} –≥—Ä–Ω")
            print()
            print(f"üí∞ –†–û–ó–†–ê–•–£–ù–û–ö:")
            print(f"  –û—Ä–µ–Ω–¥–∞: {result['rent_cost']:.2f} –≥—Ä–Ω")
            print(f"  –°—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: {result['coverage_cost']:.2f} –≥—Ä–Ω")
            print(f"  –î–æ–≤—ñ—Ä–µ–Ω–æ—Å—Ç—ñ: {result['attorney_cost']:.2f} –≥—Ä–Ω")
            print(f"  –®—Ç—Ä–∞—Ñ: {result['penalty_cost']:.2f} –≥—Ä–Ω")
            print(f"  –í–°–¨–û–ì–û: {result['total_cost']:.2f} –≥—Ä–Ω")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üîê –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –û–†–ï–ù–î–ò –°–ï–ô–§–£ - CLI –¢–ï–°–¢")
    print("=" * 50)
    
    calc = SafeCalculatorCLI()
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    calc.show_clients()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
    calc.demo_calculations()
    
    print("\n‚úÖ CLI —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("–î–ª—è –∑–∞–ø—É—Å–∫—É GUI –≤–µ—Ä—Å—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ: python safe_calculator.py")

if __name__ == "__main__":
    main()
